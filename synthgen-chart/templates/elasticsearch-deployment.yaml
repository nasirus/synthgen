apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-elasticsearch"
  labels:
    app: "{{ .Release.Name }}-elasticsearch"
    app.kubernetes.io/name: "{{ .Release.Name }}-elasticsearch"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-elasticsearch"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-elasticsearch"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: elasticsearch
        image: "{{ .Values.elasticsearch.image.repository }}:{{ .Values.elasticsearch.image.tag }}"
        imagePullPolicy: "{{ .Values.elasticsearch.image.pullPolicy }}"
        securityContext:
          privileged: true
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: "{{ .Values.elasticsearch.resources.limits.cpu }}"
            memory: "{{ .Values.elasticsearch.resources.limits.memory }}"
        env:
        - name: discovery.type
          value: "{{ index .Values.elasticsearch.env "discovery.type" }}"
        - name: xpack.security.enabled
          value: "{{ index .Values.elasticsearch.env "xpack.security.enabled" | toString }}"
        - name: ES_JAVA_OPTS
          value: "{{ .Values.elasticsearch.env.ES_JAVA_OPTS }}"
        livenessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
      volumes:
      - name: elasticsearch-data
        {{- if .Values.elasticsearch.persistence.enabled }}
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-elasticsearch-pvc"
        {{- else }}
        emptyDir: {}
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-elasticsearch"
  labels:
    app: "{{ .Release.Name }}-elasticsearch"
    app.kubernetes.io/name: "{{ .Release.Name }}-elasticsearch"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
spec:
  type: "{{ .Values.elasticsearch.service.type }}"
  ports:
  - port: {{ .Values.elasticsearch.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: "{{ .Release.Name }}-elasticsearch"
{{- if .Values.elasticsearch.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ .Release.Name }}-elasticsearch-pvc"
  labels:
    app: "{{ .Release.Name }}-elasticsearch"
    app.kubernetes.io/name: "{{ .Release.Name }}-elasticsearch"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "{{ include "synthgen.storageClass" . }}"
  resources:
    requests:
      storage: "{{ .Values.elasticsearch.persistence.size }}"
{{- end }} 